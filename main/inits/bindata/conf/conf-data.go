// Code generated by go-bindata.
// sources:
// conf/app.yml
// conf/db.yml
// DO NOT EDIT!

package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x4a\xc3\x40\x14\x86\xf7\x03\x73\x87\x07\xdd\xb6\x64\x2a\x56\xe2\xec\xb4\xb6\x62\x69\x6d\xd1\x14\x17\x22\x32\x4d\x9e\x49\x60\x32\xaf\xcc\x4c\x6c\x3d\x80\x88\x0b\x2f\xe0\x11\x5c\x74\xef\xc2\xdb\x28\xea\x2d\x64\xd4\x66\xf7\xfe\xff\x7b\xfc\x7c\x47\xa5\x53\x0b\x8d\x33\xe5\x8b\x3e\x59\x8b\xa9\x2f\xc9\x48\xb8\x51\xda\x21\x67\x03\xb3\x85\x03\x97\xaa\x25\x36\x60\x58\x5a\x9c\xa0\x2f\x28\x3b\x25\x7f\xa0\x35\xad\x30\x6b\xe0\xff\xe6\x21\x65\x77\x7d\x32\xae\xae\x96\x61\x74\x6a\xe6\xa6\x52\xd6\x15\x4a\x37\x9f\x49\x59\xe1\x90\x6c\xa5\xbc\x84\x09\x99\x36\x88\x2e\x8c\x94\x81\x1d\x21\xf6\xa0\xdb\x93\x62\x57\x8a\x1e\x1c\x4f\x12\xce\xfa\x85\xb2\x0e\xbd\x84\x79\x32\xec\xc4\x9c\x71\xd6\xfa\x7a\x78\xf9\xd8\x3c\xbf\xbf\x3e\x7e\xdf\x3f\x7d\xbe\x6d\x38\x9b\xfa\x02\xad\xe4\x0c\x60\x46\xd6\x4b\x88\x45\x1c\x87\x74\x92\x1b\xb2\x38\x3f\x1b\x3b\x09\x97\x51\x1b\xa2\x82\x2a\x6c\x43\x54\x3b\xb4\x91\xa6\xbc\x34\xdb\x60\x31\x2f\x9d\x0f\xec\xb7\xbe\x5e\xae\xb2\xab\xb0\x30\xba\x48\x82\x2b\xd5\x5e\xc2\xbe\x10\xd0\x72\x98\x92\xc9\x02\x1a\x53\x3e\xc6\x5b\xd4\x12\x32\x5c\xd4\x79\xa8\xce\x31\xb5\x41\x75\xbd\x5e\x77\xfe\xee\xe0\xcb\xd9\x4f\x00\x00\x00\xff\xff\x3a\x5d\xab\xd4\x6d\x01\x00\x00")

func confAppYmlBytes() ([]byte, error) {
	return bindataRead(
		_confAppYml,
		"conf/app.yml",
	)
}

func confAppYml() (*asset, error) {
	bytes, err := confAppYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.yml", size: 365, mode: os.FileMode(438), modTime: time.Unix(1554775706, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confDbYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd0\xb1\x4a\x03\x41\x10\xc6\xf1\xfe\x20\xef\x30\x90\xfe\xb8\x33\xa0\x32\xad\x95\x20\x58\xf8\x04\x73\x77\x93\xdc\xc1\xde\x6e\xb2\xb3\x97\xc4\x2e\x85\x8d\x8d\x16\x12\x04\x11\xb1\x88\x04\xbb\xd3\x52\x04\x9f\xe6\x36\xfa\x16\xb2\x87\x45\x1e\xc2\x72\x7f\xec\xff\x2b\xa6\x26\x71\x6c\x71\x10\x01\x14\x15\x29\xce\x1d\x42\x7d\x29\x33\x15\xa4\x11\xb6\x08\x39\x49\x56\xe9\xf0\x9e\x92\xc8\xc2\xd8\x02\xa1\xa6\x65\xa5\xc7\x26\x60\x69\xc4\x21\xa4\x07\x47\x71\x12\x27\x71\xda\xff\x33\xd6\x21\x8c\x46\xc9\x61\xbf\x4b\x8e\x32\x12\xde\x5f\xca\x4b\xb2\xc2\x0e\xa1\x71\xe3\xe3\x00\x52\x9a\xc5\xc5\x4c\x21\x38\xdb\x70\x00\x65\x26\x67\x3c\x67\x85\x50\x70\xd6\x4c\x02\xd5\xb4\x3c\x2d\x14\x9f\x18\xad\x05\x21\x4d\x60\x08\xdf\x5f\x4f\xfe\xe6\xc5\xbf\x3d\xef\x1e\xae\x76\xaf\x1f\x3f\xf7\xef\x7e\xdd\x76\x9b\x6d\xd7\xde\x0e\xa2\x61\x9f\x9c\x4f\x59\xef\x27\xfe\x71\xd5\x6d\xb6\xfe\xfa\xae\xfb\x5c\xfd\xe5\xeb\x76\x10\x89\xa2\x39\xff\xdf\x21\xfa\x0d\x00\x00\xff\xff\xe0\xb0\x3d\x95\x11\x02\x00\x00")

func confDbYmlBytes() ([]byte, error) {
	return bindataRead(
		_confDbYml,
		"conf/db.yml",
	)
}

func confDbYml() (*asset, error) {
	bytes, err := confDbYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/db.yml", size: 529, mode: os.FileMode(438), modTime: time.Unix(1554776041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.yml": confAppYml,
	"conf/db.yml": confDbYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.yml": &bintree{confAppYml, map[string]*bintree{}},
		"db.yml": &bintree{confDbYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

