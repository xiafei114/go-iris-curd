// Code generated by go-bindata.
// sources:
// conf/app.yml
// conf/db.yml
// DO NOT EDIT!

package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8f\x41\x6b\x13\x41\x18\x86\xef\x0b\xfb\x1f\x3e\xda\x5b\x49\x98\x69\x49\xe3\x32\xe0\x41\xd3\x46\x2c\x89\x2d\x9a\xe0\x41\xa4\x4c\x77\x3f\x77\x07\x67\xe7\x5b\xbe\x99\x35\xf1\x2c\x45\x04\x7b\xf4\xa0\x67\x2f\x7a\xe8\x59\xd1\xfe\x9b\x2e\xd5\x93\x7f\x41\xa6\x69\x72\x19\xe6\x7d\x9f\x97\x87\x99\x03\xe3\xf5\x99\xc5\x13\x1d\xaa\x11\x31\x63\x1e\x0c\x39\x05\xaf\xb4\xf5\x98\x26\x87\x6e\x0d\x0f\x7d\xae\x1b\xdc\x80\xb1\x61\x9c\x62\xa8\xa8\x78\x42\xe1\x81\xb5\xb4\xc0\x62\x03\xef\x9c\x0f\xa9\x78\x3b\x22\xe7\xdb\xba\x89\xd2\x63\x37\x77\xb5\x66\x5f\x69\xbb\x59\xce\x4c\x8d\x63\xe2\x5a\x07\x05\x53\x72\x3d\x90\xbb\x70\xa4\x1d\xec\x49\x39\x84\xdd\x7d\x25\x07\x4a\xee\xc3\xa3\xe9\x2c\x4d\x46\x95\x66\x8f\x41\xc1\x7c\x36\xee\x67\x69\x92\x26\xdb\x7f\xde\x7f\xef\x2e\xbf\x5c\xff\xfc\xf0\xf7\xfc\xe2\xe6\xea\x32\x4d\x8e\x43\x85\xac\xd2\x04\xe0\x84\x38\x28\xc8\x64\x96\xc5\xf4\xb8\x74\xc4\x38\x7f\x3a\xf1\x0a\x5e\x88\x1e\x88\x8a\x6a\xec\x81\x68\x3d\xb2\xb0\x54\x1a\xb7\x0e\x8c\xa5\xf1\x21\xb2\xdb\xfa\xb4\x59\x14\x2f\xa3\xe1\xe8\xf9\x2c\xbe\x95\xda\xa0\x60\x28\x07\x99\x94\xb0\xed\x31\x27\x57\x00\x0c\x25\xec\xac\x8e\xbd\x01\xec\xc0\x3d\xb8\xbf\x9e\xfc\xfb\xfd\xf1\xfa\xc7\xbb\xee\xeb\xb7\xee\xfc\xe2\xe6\xf3\xaf\xee\xea\x53\x74\x4d\xa8\x9c\xe0\x1b\xb4\x0a\x0a\x3c\x6b\xcb\x58\x3d\xc3\x9c\xe3\xdf\x96\xcb\x65\x7f\x75\x8f\xed\xbc\xb1\xa4\x8b\xb1\xb1\xa8\x60\xeb\x40\x89\x05\xf1\x6b\xdf\xe8\x1c\x4f\x4b\x12\x9e\x73\x51\x52\xdf\xb0\xf1\xfd\xbc\xe5\x42\xb4\xb7\x6b\x2f\xb6\xd2\xe4\x7f\x00\x00\x00\xff\xff\x58\x29\xf7\x5b\xd5\x01\x00\x00")

func confAppYmlBytes() ([]byte, error) {
	return bindataRead(
		_confAppYml,
		"conf/app.yml",
	)
}

func confAppYml() (*asset, error) {
	bytes, err := confAppYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.yml", size: 469, mode: os.FileMode(438), modTime: time.Unix(1555924021, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confDbYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd0\xb1\x4a\x03\x41\x10\xc6\xf1\xfe\x20\xef\x30\x90\xfe\xb8\x33\xa0\x32\xad\x95\x20\x58\xf8\x04\x73\x77\x93\xdc\xc1\xde\x6e\xb2\xb3\x97\xc4\x2e\x85\x8d\x8d\x16\x12\x04\x11\xb1\x88\x04\xbb\xd3\x52\x04\x9f\xe6\x36\xfa\x16\xb2\x87\x45\x1e\xc2\x72\x7f\xec\xff\x2b\xa6\x26\x71\x6c\x71\x10\x01\x14\x15\x29\xce\x1d\x42\x7d\x29\x33\x15\xa4\x11\xb6\x08\x39\x49\x56\xe9\xf0\x9e\x92\xc8\xc2\xd8\x02\xa1\xa6\x65\xa5\xc7\x26\x60\x69\xc4\x21\xa4\x07\x47\x71\x12\x27\x71\xda\xff\x33\xd6\x21\x8c\x46\xc9\x61\xbf\x4b\x8e\x32\x12\xde\x5f\xca\x4b\xb2\xc2\x0e\xa1\x71\xe3\xe3\x00\x52\x9a\xc5\xc5\x4c\x21\x38\xdb\x70\x00\x65\x26\x67\x3c\x67\x85\x50\x70\xd6\x4c\x02\xd5\xb4\x3c\x2d\x14\x9f\x18\xad\x05\x21\x4d\x60\x08\xdf\x5f\x4f\xfe\xe6\xc5\xbf\x3d\xef\x1e\xae\x76\xaf\x1f\x3f\xf7\xef\x7e\xdd\x76\x9b\x6d\xd7\xde\x0e\xa2\x61\x9f\x9c\x4f\x59\xef\x27\xfe\x71\xd5\x6d\xb6\xfe\xfa\xae\xfb\x5c\xfd\xe5\xeb\x76\x10\x89\xa2\x39\xff\xdf\x21\xfa\x0d\x00\x00\xff\xff\xe0\xb0\x3d\x95\x11\x02\x00\x00")

func confDbYmlBytes() ([]byte, error) {
	return bindataRead(
		_confDbYml,
		"conf/db.yml",
	)
}

func confDbYml() (*asset, error) {
	bytes, err := confDbYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/db.yml", size: 529, mode: os.FileMode(438), modTime: time.Unix(1554776041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.yml": confAppYml,
	"conf/db.yml": confDbYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.yml": &bintree{confAppYml, map[string]*bintree{}},
		"db.yml": &bintree{confDbYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

